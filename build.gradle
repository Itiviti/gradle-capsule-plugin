buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:0.5'
  }
}
apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'idea'
apply plugin: 'com.jfrog.bintray'

ext.isSnapshot = version == 'SNAPSHOT'

def project_description = """
A Gradle plugin utilizing Capsule, the packaging and deployment tool for JVM apps.
(https://github.com/puniverse/capsule)
"""

sourceCompatibility = 1.6
targetCompatibility = 1.6

repositories {
    mavenCentral()
}

dependencies {
    compile gradleApi()
    compile localGroovy()
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives jar
    archives sourcesJar
}

bintrayUpload.doFirst {
  if(isSnapshot){
    println "Rerun with '-Pversion=...' to set a real version and actually upload the plugin"
  } else {
    println "Go publish it! https://bintray.com/danthegoodman/maven/gradle-capsule-plugin/"
  }
}

bintray {
  user = project.hasProperty('bintrayUser') ? bintrayUser : ''
  key = project.hasProperty('bintrayKey') ? bintrayKey : ''

  configurations = ['archives']

  dryRun = isSnapshot
  publish = false

  pkg {
    repo = 'maven'
    name = 'gradle-capsule-plugin'
    desc = project_description
    websiteUrl = 'https://github.com/danthegoodman/gradle-capsule-plugin'
    issueTrackerUrl = 'https://github.com/danthegoodman/gradle-capsule-plugin/issues'
    vcsUrl = 'https://github.com/danthegoodman/gradle-capsule-plugin.git'
    licenses = ['MIT']
    labels = ['shade', 'fatjar', 'uberjar', 'onejar', 'capsule']
    publicDownloadNumbers = true

    version {
      name = project.version
      vcsTag = project.version
      attributes = ['gradle-plugin': 'us.kirchmeier.capsule:us.kirchmeier:gradle-capsule-plugin']
    }
  }
}

test {
    useTestNG()
}

task testIntegration(dependsOn:'jar', group: 'Verification', description: 'Runs the integration tests') << {
  println("--------------------------------------------------------------------------------")
  def baseDir = "${projectDir}/src/test/gradle"

  def proc = ["${baseDir}/gradlew", "self-test"].execute(null, file(baseDir))
  proc.consumeProcessOutput(System.out, System.err)
  int exitCode = proc.waitFor()
  println("--------------------------------------------------------------------------------")
  if(exitCode != 0){
    throw new GradleException("Integration Tests Failed")
  }
}

check.dependsOn testIntegration
